package com.cloupia.feature.storage.tabularReports;

import com.cloupia.feature.storage.constants.StorageConstants;
import com.cloupia.model.cIM.DynReportContext;
import com.cloupia.model.cIM.ReportContextRegistry;
import com.cloupia.service.cIM.inframgr.reportengine.ContextMapRule;
import com.cloupia.service.cIM.inframgr.reports.simplified.CloupiaEasyReportWithActions;
import com.cloupia.service.cIM.inframgr.reports.simplified.CloupiaReportAction;


/**
 * This is an example demonstrating how to generate a report using the POJO approach.
 * There isn't much to it, a lot of the work was already done in the DummyInterface POJO.  I already
 * added all the annotations to specify which fields should show in the report and what each column is named.
 * 
 * All you need to do here is make sure you extend CloupiaEasyReportWithActions, provide a unique name
 * for the report and the label for the report you want shown in the UI and the report POJO.
 */
public class StorageSampleEasyReport extends CloupiaEasyReportWithActions {


	public StorageSampleEasyReport(String name, String label, Class dbSource) {
		super(name, label, dbSource);
		
		//You need to use your own query builder and parse the context
		//as per requirement. Refer SampleEasyReportQueryBuilder class for implementation
		this.setQueryBuilder(new SampleEasyReportQueryBuilder());
	}
	
	/**
	 * Provides report action implementations
	 * @return array of CloupiaReportAction
	 */
	@Override
	public CloupiaReportAction[] getActions() {
		// TODO Auto-generated method stub
		return null;
	}
	
	/**
	 * Defines under which menu the report should be shown in UI
	 * @return returns menu Id
	 */
	@Override
	public int getMenuID() {
		return StorageConstants.PHYSICAL_STORAGE_MENU;
	}
	
	/**
	 * Defines the report context map rule
	 * @return returns map rule
	 */
	@Override
	public ContextMapRule[] getMapRules() {
		//i'm using an autogenerated report context (which I registered in FooModule), as mentioned in documentation
		//the type may vary depending on deployments, so the safest way to retrieve the auto generated type value
		//is to use the getContextByName api!
		DynReportContext dummyContextOneType = ReportContextRegistry.getInstance().getContextByName(StorageConstants.SAMPLE_REPORT_CONTEXT_TYPE);
		ContextMapRule rule = new ContextMapRule();
		rule.setContextName(dummyContextOneType.getId());
		rule.setContextType(dummyContextOneType.getType());
		
		ContextMapRule[] rules = new ContextMapRule[1];
		rules[0] = rule;
		
		return rules;
	}
	

}
