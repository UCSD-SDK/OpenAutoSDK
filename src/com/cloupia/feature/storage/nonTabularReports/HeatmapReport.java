package com.cloupia.feature.storage.nonTabularReports;

import com.cloupia.feature.storage.constants.StorageConstants;
import com.cloupia.model.cIM.DynReportContext;
import com.cloupia.model.cIM.ReportContextRegistry;
import com.cloupia.model.cIM.ReportDefinition;
import com.cloupia.service.cIM.inframgr.reportengine.ContextMapRule;
import com.cloupia.service.cIM.inframgr.reports.simplified.CloupiaNonTabularReport;
import com.cloupia.service.cIM.inframgr.reports.simplified.CloupiaReportAction;

/**
 * This is the first half showing you how to build your own heat map.  The second half is in
 * HeatmapReportImpl.java.  This looks like a normal tabular report with a couple of
 * important differences to mention:
 * 
 * 1. Extend CloupiaNonTabularReport
 * 2. getReportType returns REPORT_TYPE_HEATMAP
 *
 */
public class HeatmapReport extends CloupiaNonTabularReport {
	
	private static final String NAME = "storageModule.heatmap.report";
	private static final String LABEL = "Heatmap Report";
	
	public HeatmapReport() {
		super();
	}
	/**
	 * Provides report implementation class
	 * @return report implementation class
	 */
	@Override
	public Class getImplementationClass() {
		return HeatmapReportImpl.class;
	}
	/**
	 * @return Report label
	 */
	@Override
	public String getReportLabel() {
		return LABEL;
	}
	/**
     * @return report name
     */
	@Override
	public String getReportName() {
		return NAME;
	}
	/**
     * @return true only if the report implementation followed POJO approach 
     */
	@Override
	public boolean isEasyReport() {
		return false;
	}
	/**
     * @return true if the report does not have any drillDown report
     */
	@Override
	public boolean isLeafReport() {
		return true;
	}
	/** 
	 * @return report type like tabular report,snapshot report ,summary report etc.
	 */
	@Override
	public int getReportType() {
		return ReportDefinition.REPORT_TYPE_HEATMAP;
	}
	
	/**
	 * Defines under which menu the report should be shown in UI
	 * @return returns menu Id
	 */
	@Override
	public int getMenuID() {
		return StorageConstants.PHYSICAL_STORAGE_MENU;
	}
	
	/**
	 * Defines the report context map rule
	 * @return returns map rule
	 */
	@Override
	public ContextMapRule[] getMapRules() {
		//i'm using an autogenerated report context (which I registered in FooModule), as mentioned in documentation
		//the type may vary depending on deployments, so the safest way to retrieve the auto generated type value
		//is to use the getContextByName api!
		DynReportContext dummyContextOneType = ReportContextRegistry.getInstance().getContextByName(StorageConstants.INFRA_ACCOUNT_TYPE);
		ContextMapRule rule = new ContextMapRule();
		rule.setContextName(dummyContextOneType.getId());
		rule.setContextType(dummyContextOneType.getType());
		
		ContextMapRule[] rules = new ContextMapRule[1];
		rules[0] = rule;
		
		return rules;
	}

}
